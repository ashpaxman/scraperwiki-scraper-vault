###############################################################################
# START HERE: Tutorial for scraping pages behind form, using the
# very powerful Mechanize library. Documentation is here: 
# http://wwwsearch.sourceforge.net/mechanize/
###############################################################################
import mechanize 
import lxml.html
import scraperwiki
import re
import cgi



def getAMBestAttributes(br,url,ambestNum):
    response = br.open(url)
    html = response.read().strip()
    root = lxml.html.fromstring(html) # turn our HTML into an lxml object
    
    companyNameDiv = root.cssselect("div[class=h1]")
    companyAttributeTDs = root.cssselect("td[class=p]")
    #print len(companyAttributeTDs)
    #print len(companyNameDiv)
    financialStrengthRatings = companyAttributeTDs[0].text_content().strip().encode('utf-8')
    issuerCreditRatings = companyAttributeTDs[1].text_content().strip().encode('utf-8')
    attributeString = issuerCreditRatings + " " + financialStrengthRatings
    attributeString = attributeString.replace('\xa0','')
    attributeString = attributeString.replace('\xc2','')
    fsrComponentsPattern = re.compile(r"(Rating|Financial Size Category|Affiliation Code):(.*)",re.MULTILINE)
    fsrMatches = fsrComponentsPattern.findall(attributeString)
    
    print fsrMatches
    fsrAttributes = ["CompanyName","Rating","Financial Size Category","Affiliation Code"]
    fsrData = {
                "CompanyName":companyNameDiv[0].text_content().strip().encode('utf-8'),
                "CompanyURL":url,
                "AMBestNum":ambestNum,
                   "Rating":"n/a",
                    "Financial Size Category":"n/a",
                    "Affiliation Code":"n/a"
            }
    for fsrAttribute,fsrValue in fsrMatches:
        print fsrAttribute + " : " + fsrValue
        fsrData[fsrAttribute] = fsrValue
        #fsrAttributes.append(fsrAttribute)
    
    scraperwiki.sqlite.save(fsrAttributes,fsrData)

ambestprofileURL = "http://www3.ambest.com/ratings/FullProfile.asp?Bl=18&AMBNum=68175&AltSrc=29&AltNum=&URATINGID=2259093&Ext_User=&Ext_Misc="

ambestURLBase = "http://www3.ambest.com/ratings/FullProfile.asp?Bl=18&AMBNum=~~AMBNUM~~&AltSrc=29&AltNum=&URATINGID=2259093&Ext_User=&Ext_Misc="
companyProfileIDs = ["7424","6002","60599","60404","6006","9199","6293","68026","9417","6830","6027","7291","6031","9122","6040","60382","9024","60367","6051","6052","68071","6054","6055","6989","6788","6058","6809","6062","6064","6065","6069","6942","6680","6087","60708","7362","68152","8831","8795","6109","6233","6152","68545","7464","9088","60687","6126","7374","6130","6132","6135","8525","6140","60325","6199","6467","9083","9516","6341","6965","60347","6143","60002","6145","6149","8448","6151","6468","6162","60060","60007","68175","6170","68117","9062","68045","8827","6191","60246","6206","6276","9124","76825","6211","6214","6221","6538","8944","6757","6568","6227","6238","6240","8502","60579","68009","6243","6244","8187","8491","68105","6258","8064","6266","6692","6280","7360","7607","6292","9084","6294","6302","6305","9373","60690","6339","60055","8005","6976","60315","7276","6360","7650","6362","6363","6364","6365","6373","6381","6384","7122","9138","6386","7426","7376","7086","9125","9869","8256","6383","8257","6413","6119","6904","9418","60104","9023","68147","9412","6514","8069","9053","7322","68158","9492","6436","8161","6439","6441","6234","9189","6648","7183","60026","7299","9530","6459","6462","6466","6470","7332","6253","6474","6864","6491","6981","9362","9177","6503","6504","8197","6508","8081","68031","6517","9117","7285","7325","6518","6534","6535","9129","60248","60682","9326","6542","6547","8437","6895","8388","7739","6572","8588","6580","6583","6412","6596","60216","6475","9074","60056","6681","60353","6604","6605","60365","6616","6617","9255","7393","7011","6627","6175","6629","6637","68126","7775","6645","6647","8921","9458","9086","6657","6694","6239","6664","60237","6678","6686","6842","6695","3150","8719","6703","7330","9075","6125","6704","9165","6711","6718","6724","7233","6737","6739","8664","6742","6751","8091","6744","8354","6756","6746","8851","6753","6163","6771","6772","6777","60343","7798","6790","7447","6802","8633","6811","9070","6812","9043","7087","7148","9054","6820","60566","6827","6835","6837","6845","68015","6849","8930","6852","6853","6854","6863","7879","8863","7890","6877","60326","6883","9156","6885","9058","6893","6000","60403","8973","6900","6901","7420","9073","6903","9325","8946","9166","7142","68237","9332","9072","6922","7451","6929","6933","6935","9348","60399","6948","6693","6150","7326","8860","6962","60340","6968","8240","9371","8715","6974","9144","7207","9345","6986","6990","6846","6157","9080","8345","6592","7010","7012","60110","6057","6696","6821","60212","60575","6555","7170","9064","7025","7029","7034","7987","7040","7041","7042","68023","7992","9322","6675","7053","60271","7521","8225","9606","7069","7070","7408","7073","60342","7075","9370","7079","7080","7082","7085","6594","8474","8226","9513","6115","7102","7104","9027","7283","7017","7112","8443","7118","6008","9342","60222","7128","8051","7132","7136","7437","9537","8487","7267","6095","7631","6165","60706","9233","60366","9065","60392","7150","6297","7152","7155","7232","8533","8181","7168","6472","7172","7174","7175","7178","7164","7192","7528","6454","7198","60097","7204","6256","8492","7146","60247","9350","60567","7021","60691","7208","60339","7222","7243","7235","7239","9071","68070","7248","7249","6734","60560","6084","7259","7349","6225"]
br = mechanize.Browser()

for amNum in companyProfileIDs:
    amProfileURL = ambestURLBase.replace('~~AMBNUM~~', amNum)
    print amProfileURL
    getAMBestAttributes(br,amProfileURL,amNum)




