import scraperwiki

# Helping https://scraperwiki.com/scrapers/gordo
# Currently this scrapes div id="detailtext" in each page
# Needs to be refined so that you're grabbing <b> and <br/> tags within that - or regex?
# Also needs simplifying/renaming of variables/comments etc.

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 52 or so)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one table, so we need to specify the class="destinations", represented by the full stop
    rows = root.cssselect("div#detailtext")
    for row in rows:
        #Create a new empty record
        record = {}
            #Put the contents of the first <td> into a record in the column 'FSM'
        record['FSM'] = row.text_content()
            #this takes the ID number, which has been named item in the for loop below
        record['ID'] = item
        print record, '------------'
            #Save in the SQLite database, with the ID code to be used as the unique reference
        scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://marinetraffic.com/ais/shipdetails.aspx?MMSI='
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of school codes
schoolIDs = ['373765000','248853000','235087417','311045100','538003955','538003957','273148710','636091770','312750000','240989000','538003844','538002376','305714000','305714000','373351000','373351000','305799000','548848000','548848000','538004429','256024000','205205000','215042000','215042000','248465000','219396000','236578000','226331000','371229000','271002729','271002729','354496000','209299000','209299000','305394000','305394000','305394000','249666000','249666000','305820000','226270000','477682100','477682100','636015390','235072651','247256300','241168000','305615000','311052300','311052300','311058400','311058400','306013000','209724000','209724000','247258100','247258100','247312800','247312800','257898000','248375000','248375000','248375000','249605000','413192000','413192000','636092027','236610000','235081764','235081764','636014806','636014806','636091793','477728700','477728700','246716000','636014709','636014216','636014216','235088471','305771000','305861000','305861000','305862000','305862000','548820000','219012477','305358000','538004244','538004244','538004245','538004245','376083000','468395000','468395000','245466000','245466000','576259000','235082449','538002572','538003750','538003956','538003956','235068936','235068936','311046600','311046600','255803860','255803860','255803860','235081665','273341430','273341430','477899600','477899600','325466000','636015035','305768000','305768000','636092120','244899000','548823000','219339000','351785000','305846000','305845000','244796000','246626000','538003820','538004178','538003876','538003876','636013816','636013816','636013816','220624000','220624000','636091976','305644000','525015688','538090441','538090441','538090441','249845000','249845000','235075588','235075588','305657000','305657000','244997000','244997000','271042763','271042763','355886000','245947000','241074000','241074000','636092173','636092173','219395000','218447000','219127000','219127000','220581000','220580000','220580000','219375000','219375000','477397100','305804000','305804000','566399000','566399000','247294100','247294100','235088073','235088073','246754000','636014474','636014474','258010000','241071000','241071000','311005700','311005700','305628000','215194000','538004071','311018300','311018300','311018300','241193000','241193000','230013000','305800000','636092000','636092000','215345000','215345000','212854000','311055700','311055700','248424000','249954000','249954000','249954000','356221000','538004049','538004049','247239700','325447000','325447000','566132000','566132000','565236000','565236000','566610000','219290000','219290000','566243000','219194000','219194000','636014188','636014188','373428000','538004293','538004293','636014191','373297000','503728000','477535900','244909000','209038000','256597000','256597000','441628000','275408000','209778000','305533000','305533000','518435000','538004475','538004475','241016000','241016000','241016000','636014628','636014628','305779000','305779000','210582000','210582000','209023000','636014975','210323000','212758000','273355040','477351900','538004365','538004365','538004365','310625000','310625000','310625000','310627000','310627000','310627000','310627000','310624000','310624000','310624000','256878000','341887000','341887000','265936000','311052200','311052200','538090428','236593000','236593000','209449000','209449000','209449000','372308000','256470000','636092072','636092072','205581000','205596000','273359900','241129000','636014895','219153000','219153000','311027400','311027400','209196000','209196000','218292000','218292000','235080015','235080015','235080015','477346800','259801000','257007000','311056500','311042100','377294000','273356030','432794000','432794000','311041600','311041600','235075135','235075135','538004460','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','419764000','419764000','305781000','305781000','231790000','231790000','341091000','440001000','440001000','259890000','259890000','259890000','259890000','219015425','273357270','636015044','248436000','538002179','251604000','577031000','636014190','636014190','248897000','538003908','538003908','538003908','538003908','636015477','538004414','538004414','538004414','566064000','209015000','636015512','538004652','538004652','210032000','210032000','210055000','210055000','245300744','566233000','244561000','244561000','244561000','271002685','271002685','477051600','477051600','311024300','636015138','636015138','538004435','305678000','305678000','636092080','636092080','248689000','248689000','248675000','248675000','248675000','248675000','248678000','248678000','248678000','414017000','273352470','271040311','271040311','413442980','636014629','356329000','636014966','247239700']

#go through the schoolIDs list above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)
import scraperwiki

# Helping https://scraperwiki.com/scrapers/gordo
# Currently this scrapes div id="detailtext" in each page
# Needs to be refined so that you're grabbing <b> and <br/> tags within that - or regex?
# Also needs simplifying/renaming of variables/comments etc.

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 52 or so)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one table, so we need to specify the class="destinations", represented by the full stop
    rows = root.cssselect("div#detailtext")
    for row in rows:
        #Create a new empty record
        record = {}
            #Put the contents of the first <td> into a record in the column 'FSM'
        record['FSM'] = row.text_content()
            #this takes the ID number, which has been named item in the for loop below
        record['ID'] = item
        print record, '------------'
            #Save in the SQLite database, with the ID code to be used as the unique reference
        scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://marinetraffic.com/ais/shipdetails.aspx?MMSI='
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of school codes
schoolIDs = ['373765000','248853000','235087417','311045100','538003955','538003957','273148710','636091770','312750000','240989000','538003844','538002376','305714000','305714000','373351000','373351000','305799000','548848000','548848000','538004429','256024000','205205000','215042000','215042000','248465000','219396000','236578000','226331000','371229000','271002729','271002729','354496000','209299000','209299000','305394000','305394000','305394000','249666000','249666000','305820000','226270000','477682100','477682100','636015390','235072651','247256300','241168000','305615000','311052300','311052300','311058400','311058400','306013000','209724000','209724000','247258100','247258100','247312800','247312800','257898000','248375000','248375000','248375000','249605000','413192000','413192000','636092027','236610000','235081764','235081764','636014806','636014806','636091793','477728700','477728700','246716000','636014709','636014216','636014216','235088471','305771000','305861000','305861000','305862000','305862000','548820000','219012477','305358000','538004244','538004244','538004245','538004245','376083000','468395000','468395000','245466000','245466000','576259000','235082449','538002572','538003750','538003956','538003956','235068936','235068936','311046600','311046600','255803860','255803860','255803860','235081665','273341430','273341430','477899600','477899600','325466000','636015035','305768000','305768000','636092120','244899000','548823000','219339000','351785000','305846000','305845000','244796000','246626000','538003820','538004178','538003876','538003876','636013816','636013816','636013816','220624000','220624000','636091976','305644000','525015688','538090441','538090441','538090441','249845000','249845000','235075588','235075588','305657000','305657000','244997000','244997000','271042763','271042763','355886000','245947000','241074000','241074000','636092173','636092173','219395000','218447000','219127000','219127000','220581000','220580000','220580000','219375000','219375000','477397100','305804000','305804000','566399000','566399000','247294100','247294100','235088073','235088073','246754000','636014474','636014474','258010000','241071000','241071000','311005700','311005700','305628000','215194000','538004071','311018300','311018300','311018300','241193000','241193000','230013000','305800000','636092000','636092000','215345000','215345000','212854000','311055700','311055700','248424000','249954000','249954000','249954000','356221000','538004049','538004049','247239700','325447000','325447000','566132000','566132000','565236000','565236000','566610000','219290000','219290000','566243000','219194000','219194000','636014188','636014188','373428000','538004293','538004293','636014191','373297000','503728000','477535900','244909000','209038000','256597000','256597000','441628000','275408000','209778000','305533000','305533000','518435000','538004475','538004475','241016000','241016000','241016000','636014628','636014628','305779000','305779000','210582000','210582000','209023000','636014975','210323000','212758000','273355040','477351900','538004365','538004365','538004365','310625000','310625000','310625000','310627000','310627000','310627000','310627000','310624000','310624000','310624000','256878000','341887000','341887000','265936000','311052200','311052200','538090428','236593000','236593000','209449000','209449000','209449000','372308000','256470000','636092072','636092072','205581000','205596000','273359900','241129000','636014895','219153000','219153000','311027400','311027400','209196000','209196000','218292000','218292000','235080015','235080015','235080015','477346800','259801000','257007000','311056500','311042100','377294000','273356030','432794000','432794000','311041600','311041600','235075135','235075135','538004460','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','419764000','419764000','305781000','305781000','231790000','231790000','341091000','440001000','440001000','259890000','259890000','259890000','259890000','219015425','273357270','636015044','248436000','538002179','251604000','577031000','636014190','636014190','248897000','538003908','538003908','538003908','538003908','636015477','538004414','538004414','538004414','566064000','209015000','636015512','538004652','538004652','210032000','210032000','210055000','210055000','245300744','566233000','244561000','244561000','244561000','271002685','271002685','477051600','477051600','311024300','636015138','636015138','538004435','305678000','305678000','636092080','636092080','248689000','248689000','248675000','248675000','248675000','248675000','248678000','248678000','248678000','414017000','273352470','271040311','271040311','413442980','636014629','356329000','636014966','247239700']

#go through the schoolIDs list above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)
import scraperwiki

# Helping https://scraperwiki.com/scrapers/gordo
# Currently this scrapes div id="detailtext" in each page
# Needs to be refined so that you're grabbing <b> and <br/> tags within that - or regex?
# Also needs simplifying/renaming of variables/comments etc.

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 52 or so)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one table, so we need to specify the class="destinations", represented by the full stop
    rows = root.cssselect("div#detailtext")
    for row in rows:
        #Create a new empty record
        record = {}
            #Put the contents of the first <td> into a record in the column 'FSM'
        record['FSM'] = row.text_content()
            #this takes the ID number, which has been named item in the for loop below
        record['ID'] = item
        print record, '------------'
            #Save in the SQLite database, with the ID code to be used as the unique reference
        scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://marinetraffic.com/ais/shipdetails.aspx?MMSI='
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of school codes
schoolIDs = ['373765000','248853000','235087417','311045100','538003955','538003957','273148710','636091770','312750000','240989000','538003844','538002376','305714000','305714000','373351000','373351000','305799000','548848000','548848000','538004429','256024000','205205000','215042000','215042000','248465000','219396000','236578000','226331000','371229000','271002729','271002729','354496000','209299000','209299000','305394000','305394000','305394000','249666000','249666000','305820000','226270000','477682100','477682100','636015390','235072651','247256300','241168000','305615000','311052300','311052300','311058400','311058400','306013000','209724000','209724000','247258100','247258100','247312800','247312800','257898000','248375000','248375000','248375000','249605000','413192000','413192000','636092027','236610000','235081764','235081764','636014806','636014806','636091793','477728700','477728700','246716000','636014709','636014216','636014216','235088471','305771000','305861000','305861000','305862000','305862000','548820000','219012477','305358000','538004244','538004244','538004245','538004245','376083000','468395000','468395000','245466000','245466000','576259000','235082449','538002572','538003750','538003956','538003956','235068936','235068936','311046600','311046600','255803860','255803860','255803860','235081665','273341430','273341430','477899600','477899600','325466000','636015035','305768000','305768000','636092120','244899000','548823000','219339000','351785000','305846000','305845000','244796000','246626000','538003820','538004178','538003876','538003876','636013816','636013816','636013816','220624000','220624000','636091976','305644000','525015688','538090441','538090441','538090441','249845000','249845000','235075588','235075588','305657000','305657000','244997000','244997000','271042763','271042763','355886000','245947000','241074000','241074000','636092173','636092173','219395000','218447000','219127000','219127000','220581000','220580000','220580000','219375000','219375000','477397100','305804000','305804000','566399000','566399000','247294100','247294100','235088073','235088073','246754000','636014474','636014474','258010000','241071000','241071000','311005700','311005700','305628000','215194000','538004071','311018300','311018300','311018300','241193000','241193000','230013000','305800000','636092000','636092000','215345000','215345000','212854000','311055700','311055700','248424000','249954000','249954000','249954000','356221000','538004049','538004049','247239700','325447000','325447000','566132000','566132000','565236000','565236000','566610000','219290000','219290000','566243000','219194000','219194000','636014188','636014188','373428000','538004293','538004293','636014191','373297000','503728000','477535900','244909000','209038000','256597000','256597000','441628000','275408000','209778000','305533000','305533000','518435000','538004475','538004475','241016000','241016000','241016000','636014628','636014628','305779000','305779000','210582000','210582000','209023000','636014975','210323000','212758000','273355040','477351900','538004365','538004365','538004365','310625000','310625000','310625000','310627000','310627000','310627000','310627000','310624000','310624000','310624000','256878000','341887000','341887000','265936000','311052200','311052200','538090428','236593000','236593000','209449000','209449000','209449000','372308000','256470000','636092072','636092072','205581000','205596000','273359900','241129000','636014895','219153000','219153000','311027400','311027400','209196000','209196000','218292000','218292000','235080015','235080015','235080015','477346800','259801000','257007000','311056500','311042100','377294000','273356030','432794000','432794000','311041600','311041600','235075135','235075135','538004460','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','246695000','419764000','419764000','305781000','305781000','231790000','231790000','341091000','440001000','440001000','259890000','259890000','259890000','259890000','219015425','273357270','636015044','248436000','538002179','251604000','577031000','636014190','636014190','248897000','538003908','538003908','538003908','538003908','636015477','538004414','538004414','538004414','566064000','209015000','636015512','538004652','538004652','210032000','210032000','210055000','210055000','245300744','566233000','244561000','244561000','244561000','271002685','271002685','477051600','477051600','311024300','636015138','636015138','538004435','305678000','305678000','636092080','636092080','248689000','248689000','248675000','248675000','248675000','248675000','248678000','248678000','248678000','414017000','273352470','271040311','271040311','413442980','636014629','356329000','636014966','247239700']

#go through the schoolIDs list above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)
