# Data stored on individual pages not accessible from one single page
# typical URL is http://www.isi.net/schools/6173
# Need to cycle through an array of those codes, created by using the =JOIN formula in Google Docs
#TO SOLVE: Some pages have 'country', creating 12 cells where the code below presumes 10
#COMPARE http://www.isi.net/schools/6198/ with http://www.isi.net/schools/7557/
#ALSO: Original table gives year of inspection - may be duplicate entries where 2 inspections?
#ALSO: Where no year of inspection, some may be Ofsted/other - see http://www.isi.net/schools/6198/

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 44)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one div, so we need to specify the class="tabular", 'class' represented by the full stop
    #there's also more than one <tr> within that div, and more than one <td>... 
    #'rows' will contain all 10 <td>s as a list, and we'll grab the ones we want in turn
    rows = root.cssselect("div.tabular tr td")
    print rows
    #create a new record to contain the data
    record = {}
#    if rows
    record['Postcode'] = rows[3].text
    record['Town'] = rows[1].text
#        record['Country'] = rows[5].text
 #       record['Ages'] = rows[7].text
  #      record['Day_board'] = rows[9].text
   #     record['Gender'] = rows[11].text
    #    record['ID'] = item
     #   print record, '------------'
      #  scraperwiki.sqlite.save(["ID"], record)
#    elif rows:
 #       #The 4th <td> tag contains the postcode for the school, so we use [3] to grab that one
  #      record['Postcode'] = rows[3].text
   #     record['Town'] = rows[1].text
    record['Ages'] = rows[5].text
    record['Day_board'] = rows[7].text
    record['Gender'] = rows[9].text
    record['ID'] = item
    print record, '------------'
    scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://www.isi.net/schools/'
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of ID codes from URLs
schoolIDs = ['6173', '7557', '6174', '6175', '7095', '6176', '6880', '6177', '6179', '6180', '6181', '7492', '7414', '6182', '6183', '7097', '7390', '7098', '6184', '6185', '6186', '6187', '6188', '6189', '6190', '7282', '6191', '6192', '6193', '6194', '6196', '6197', '6198', '6324', '6199', '7283', '6200', '6202', '6203', '6204', '7100', '6207', '6208', '6209', '6210', '6211', '6212', '6213', '8225', '7394', '7600', '7383', '6214', '6215', '6216', '6217', '7286', '6218', '6219', '6220', '6221', '6222', '6223', '8210', '6224', '6225', '6226', '7364', '6229', '6230', '7101', '6231', '6232', '6233', '6379', '6234', '6235', '6236', '6237', '6238', '7587', '6239', '6240', '6241', '7320', '7501', '6242', '6243', '6244', '7466', '6245', '7580', '6246', '6247', '6248', '6249', '7450', '6250', '6252', '6253', '6254', '7289', '6255', '6256', '7402', '6257', '7103', '6926', '6258', '6260', '6261', '6262', '6263', '7202', '7224', '7302', '6264', '6265', '6266', '6267', '6268', '6269', '7631', '6270', '6271', '6273', '6274', '7629', '6276', '7290', '6277', '6278', '6279', '6281', '6282', '6284', '6283', '7105', '7291', '6286', '7505', '7581', '7443', '7399', '7591', '7592', '8231', '7408', '7398', '7593', '7480', '7377', '6287', '6288', '6289', '7292', '6290', '6291', '6292', '8209', '6293', '6294', '7488', '7386', '6295', '6296', '7565', '7379', '6297', '8193', '6298', '7506', '6299', '6300', '6302', '7568', '6303', '6305', '7575', '6306', '7582', '6307', '6308', '6309', '7106', '6310', '6311', '6312', '6313', '6314', '6304', '8226', '7107', '6315', '6316', '6317', '6318', '6837', '6319', '6320', '6321', '6322', '6323', '7293', '7108', '6325', '6326', '7353', '6327', '6328', '6329', '7109', '6330', '6331', '6332', '7437', '6333', '6334', '6335', '6336', '6337', '8218', '6338', '6339', '6340', '6342', '6343', '7335', '6344', '6345', '6346', '7334', '7299', '6347', '6348', '6349', '6351', '7354', '6352', '6353', '6354', '6355', '6357', '6359', '7001', '6361', '7301', '6362', '6363', '6364', '6365', '7110', '6367', '6369', '6370', '6372', '6373', '6374', '6375', '6401', '6377', '7111', '6378', '7486', '7579', '6380', '6382', '6383', '6384', '6385', '6386', '6387', '7385', '7623', '6388', '6389', '7308', '6390', '6391', '6392', '6393', '6394', '6395', '6396', '7242', '6397', '7500', '6399', '6400', '6402', '7113', '7112', '6403', '6404', '6405', '6406', '6407', '6408', '7601', '7566', '6409', '6410', '6411', '7287', '6413', '6414', '6415', '6416', '6417', '6418', '6420', '7451', '7380', '6422', '6423', '6424', '6425', '6428', '7428', '7567', '6429', '6430', '6431', '6432', '7433', '7114', '6433', '6434', '6435', '6437', '6438', '6439', '6440', '6441', '6442', '6443', '7622', '6444', '6445', '7395', '6446', '7393', '7372', '6447', '6448', '6449', '6450', '6451', '7303', '6452', '6453', '6454', '6455', '6456', '6457', '7388', '6459', '7405', '6460', '6461', '6462', '7628', '6463', '7304', '6465', '6464', '6466', '6467', '6468', '6469', '7115', '6470', '6471', '6472', '6473', '7558', '7116', '6474', '6475', '7104', '7124', '7493', '7490', '7305', '6476', '6477', '7117', '6479', '7118', '7119', '6482', '6483', '6484', '6638', '7396', '7120', '6485', '8241', '7121', '6486', '6738', '6487', '6489', '6490', '6491', '6492', '7122', '7306', '6495', '6626', '6496', '7599', '6497', '7307', '6499', '6498', '6500', '6501', '6502', '7123', '6503', '6504', '6505', '6506', '6436', '6507', '6508', '6509', '6512', '6513', '6514', '6516', '6517', '6518', '6519', '6520', '7125', '6521', '6522', '7464', '7355', '6523', '6524', '6525', '8227', '6526', '6527', '6528', '6530', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6544', '6545', '7309', '6546', '6547', '7127', '6548', '6549', '6550', '6551', '6552', '6553', '6554', '6555', '6556', '6557', '6558', '7630', '6559', '7356', '6561', '6562', '6564', '6567', '7389', '7611', '6568', '7310', '6569', '6570', '6573', '6574', '6575', '6576', '7411', '7583', '6578', '6579', '7311', '6580', '6581', '6582', '7128', '6583', '6584', '6585', '6586', '6587', '6588', '6589', '7576', '6590', '6591', '7496', '7452', '6592', '6593', '6594', '6595', '6596', '6597', '6598', '6599', '7313', '6600', '7416', '8235', '6602', '7314', '7421', '6603', '6604', '6605', '7129', '6606', '7316', '6607', '7130', '7132', '7133', '7134', '7135', '6608', '7131', '6609', '6601', '6610', '6611', '6426', '7136', '6613', '6614', '6616', '6617', '6618', '6619', '6620', '8250', '6621', '6529', '7137', '7404', '6624', '7138', '6625', '7625', '7502', '6627', '6628', '6719', '6629', '6631', '6632', '6633', '6635', '6636', '6622', '6640', '6641', '6642', '6643', '6924', '7329', '7139', '6644', '6645', '6646', '6647', '6649', '6650', '6651', '6652', '6655', '6656', '6657', '7570', '6658', '6659', '6660', '7598', '6661', '7357', '6662', '6663', '7140', '6664', '6665', '7569', '8195', '6666', '6667', '6668', '7141', '6669', '6670', '6671', '6672', '7142', '6673', '6674', '6675', '6677', '6678', '7143', '6680', '6681', '6683', '6684', '6685', '6686', '7144', '6687', '7145', '6689', '6691', '6690', '6692', '7321', '6695', '6696', '7358', '6697', '6698', '7146', '7147', '6699', '6700', '6702', '6701', '8229', '6703', '6704', '6705', '6706', '7504', '6707', '6708', '6709', '6710', '6712', '6711', '6714', '6715', '7148', '7149', '6716', '6718', '6720', '7573', '6721', '6722', '7150', '6723', '7151', '8221', '6724', '6725', '6726', '6206', '6727', '6728', '6729', '7590', '6730', '6731', '7424', '6732', '6733', '6734', '6735', '6736', '7267', '6737', '6740', '6741', '6742', '6743', '6744', '6745', '7435', '6746', '6747', '7375', '6748', '6749', '7371', '6751', '7322', '6750', '6752', '6753', '7586', '6754', '6755', '6756', '7497', '7050', '6757', '6758', '7152', '6759', '7155', '7156', '6565', '8244', '7157', '7158', '7412', '8217', '6760', '6761', '6762', '6763', '6764', '6765', '7403', '6766', '6768', '7456', '6769', '6770', '6771', '7159', '8243', '7160', '7161', '6772', '6773', '6774', '6775', '6776', '7162', '6778', '6779', '7589', '6780', '7163', '6781', '6782', '6739', '6783', '6784', '6785', '6786', '6787', '6788', '6789', '7345', '7164', '6790', '6791', '7449', '7165', '6792', '6794', '6795', '7166', '6796', '6797', '6798', '6799', '6800', '7167', '6801', '6802', '6803', '6804', '6805', '6806', '6807', '6808', '6809', '6810', '7605', '6811', '6812', '6813', '6814', '6815', '6816', '7168', '6817', '6818', '6819', '6820', '6821', '7397', '6822', '6823', '8228', '6824', '6825', '6826', '7169', '6827', '7370', '6828', '6829', '6830', '6831', '6832', '6833', '6834', '6835', '6855', '7170', '6836', '6838', '6839', '6840', '6841', '6842', '7400', '6843', '6844', '6846', '6848', '6849', '6850', '6851', '6852', '7171', '6853', '6854', '6171', '6856', '6857', '6858', '7172', '6859', '7173', '6860', '6861', '6862', '6863', '6864', '6865', '6866', '6867', '6868', '6869', '7366', '7174', '6922', '6870', '6871', '7491', '6941', '6963', '6872', '6874', '6875', '6876', '7381', '6877', '6878', '6879', '6615', '7175', '6881', '6882', '6883', '6884', '6885', '6886', '6427', '6887', '6888', '6889', '6890', '6891', '6892', '6893', '6894', '6895', '6896', '6897', '6693', '6898', '6899', '6900', '6901', '7079', '7507', '6902', '6903', '6904', '6905', '6906', '6907', '6908', '6909', '6910', '6911', '6912', '6913', '7487', '6914', '7561', '6915', '6916', '7369', '6919', '6920', '6917', '6918', '6921', '6923', '6927', '6925', '7609', '6928', '6929', '6930', '6931', '6932', '6934', '6935', '7618', '6938', '6939', '6940', '6942', '6943', '6944', '6946', '7453', '7559', '7572', '6948', '6949', '6950', '6953', '6952', '6954', '6955', '7331', '6957', '6956', '6958', '6959', '6960', '6961', '6962', '6966', '6965', '6964', '6967', '7378', '6968', '6969', '7444', '6970', '6971', '6972', '6973', '6974', '6975', '6976', '6977', '6978', '7503', '6980', '6979', '6981', '6984', '6982', '6985', '6986', '6987', '6988', '6989', '6991', '6992', '6993', '6994', '6995', '6996', '6997', '7368', '7616', '7462', '6998', '6999', '7000', '7002', '7003', '7004', '7333', '7005', '7006', '7007', '7008', '7489', '7010', '7011', '7012', '7013', '7016', '7017', '7019', '7020', '7023', '7024', '7025', '7018', '7014', '7027', '7499', '7029', '7030', '7454', '7031', '7032', '7033', '7336', '7420', '7034', '7035', '7036', '7382', '7037', '7038', '7039', '7041', '7042', '7401', '7043', '7045', '7337', '7046', '7047', '7048', '7049', '7051', '7407', '7052', '7053', '7054', '7055', '7056', '7057', '7058', '7059', '7455', '6777', '7338', '7061', '7063', '7064', '7066', '7067', '7068', '7069', '7071', '7072', '7073', '7176', '7074', '7075', '7076', '7077', '7078', '7081', '7082', '7083', '7341', '7084', '7361', '7085', '7086', '7087', '7088', '7342', '7089', '7090', '7091', '7092', '7093', '7094', '7179', '8220', '7362', '7180', '7181', '7182', '7184', '7185', '7186', '7187', '7188', '7177', '7189', '7191', '7484', '7099', '7192', '7193', '7384', '7194', '7195', '7190', '7196', '7197', '7198', '7199', '7200', '7201', '7348', '7203', '7204', '7205', '7374', '7206', '7207', '7208', '7209', '7210', '7211', '7212', '7472', '7213', '7214', '7215', '7217', '6301', '7363', '7218', '7470', '7219', '7220', '7436', '7221', '7222', '7223', '7225', '7227', '7228', '7229', '7230', '7231', '7232', '7233', '6172', '7234', '7235', '7236', '7237', '7238', '7239', '7626', '7624', '7577', '7240', '7241', '7243', '7244', '7247', '7248', '7250', '7251', '7477', '7252', '7253', '7365', '7254', '7255', '7257', '7258', '7259', '7260', '7261', '7262', '7263', '7264', '7265', '7373', '7268', '7269', '7270', '7271', '7272', '7352', '7273', '7274', '7275', '7178', '7574', '7276', '7277', '7278', '7279', '7280', '7281']

#go through the schoolIDs array above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)

# Data stored on individual pages not accessible from one single page
# typical URL is http://www.isi.net/schools/6173
# Need to cycle through an array of those codes, created by using the =JOIN formula in Google Docs
#TO SOLVE: Some pages have 'country', creating 12 cells where the code below presumes 10
#COMPARE http://www.isi.net/schools/6198/ with http://www.isi.net/schools/7557/
#ALSO: Original table gives year of inspection - may be duplicate entries where 2 inspections?
#ALSO: Where no year of inspection, some may be Ofsted/other - see http://www.isi.net/schools/6198/

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 44)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one div, so we need to specify the class="tabular", 'class' represented by the full stop
    #there's also more than one <tr> within that div, and more than one <td>... 
    #'rows' will contain all 10 <td>s as a list, and we'll grab the ones we want in turn
    rows = root.cssselect("div.tabular tr td")
    print rows
    #create a new record to contain the data
    record = {}
#    if rows
    record['Postcode'] = rows[3].text
    record['Town'] = rows[1].text
#        record['Country'] = rows[5].text
 #       record['Ages'] = rows[7].text
  #      record['Day_board'] = rows[9].text
   #     record['Gender'] = rows[11].text
    #    record['ID'] = item
     #   print record, '------------'
      #  scraperwiki.sqlite.save(["ID"], record)
#    elif rows:
 #       #The 4th <td> tag contains the postcode for the school, so we use [3] to grab that one
  #      record['Postcode'] = rows[3].text
   #     record['Town'] = rows[1].text
    record['Ages'] = rows[5].text
    record['Day_board'] = rows[7].text
    record['Gender'] = rows[9].text
    record['ID'] = item
    print record, '------------'
    scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://www.isi.net/schools/'
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of ID codes from URLs
schoolIDs = ['6173', '7557', '6174', '6175', '7095', '6176', '6880', '6177', '6179', '6180', '6181', '7492', '7414', '6182', '6183', '7097', '7390', '7098', '6184', '6185', '6186', '6187', '6188', '6189', '6190', '7282', '6191', '6192', '6193', '6194', '6196', '6197', '6198', '6324', '6199', '7283', '6200', '6202', '6203', '6204', '7100', '6207', '6208', '6209', '6210', '6211', '6212', '6213', '8225', '7394', '7600', '7383', '6214', '6215', '6216', '6217', '7286', '6218', '6219', '6220', '6221', '6222', '6223', '8210', '6224', '6225', '6226', '7364', '6229', '6230', '7101', '6231', '6232', '6233', '6379', '6234', '6235', '6236', '6237', '6238', '7587', '6239', '6240', '6241', '7320', '7501', '6242', '6243', '6244', '7466', '6245', '7580', '6246', '6247', '6248', '6249', '7450', '6250', '6252', '6253', '6254', '7289', '6255', '6256', '7402', '6257', '7103', '6926', '6258', '6260', '6261', '6262', '6263', '7202', '7224', '7302', '6264', '6265', '6266', '6267', '6268', '6269', '7631', '6270', '6271', '6273', '6274', '7629', '6276', '7290', '6277', '6278', '6279', '6281', '6282', '6284', '6283', '7105', '7291', '6286', '7505', '7581', '7443', '7399', '7591', '7592', '8231', '7408', '7398', '7593', '7480', '7377', '6287', '6288', '6289', '7292', '6290', '6291', '6292', '8209', '6293', '6294', '7488', '7386', '6295', '6296', '7565', '7379', '6297', '8193', '6298', '7506', '6299', '6300', '6302', '7568', '6303', '6305', '7575', '6306', '7582', '6307', '6308', '6309', '7106', '6310', '6311', '6312', '6313', '6314', '6304', '8226', '7107', '6315', '6316', '6317', '6318', '6837', '6319', '6320', '6321', '6322', '6323', '7293', '7108', '6325', '6326', '7353', '6327', '6328', '6329', '7109', '6330', '6331', '6332', '7437', '6333', '6334', '6335', '6336', '6337', '8218', '6338', '6339', '6340', '6342', '6343', '7335', '6344', '6345', '6346', '7334', '7299', '6347', '6348', '6349', '6351', '7354', '6352', '6353', '6354', '6355', '6357', '6359', '7001', '6361', '7301', '6362', '6363', '6364', '6365', '7110', '6367', '6369', '6370', '6372', '6373', '6374', '6375', '6401', '6377', '7111', '6378', '7486', '7579', '6380', '6382', '6383', '6384', '6385', '6386', '6387', '7385', '7623', '6388', '6389', '7308', '6390', '6391', '6392', '6393', '6394', '6395', '6396', '7242', '6397', '7500', '6399', '6400', '6402', '7113', '7112', '6403', '6404', '6405', '6406', '6407', '6408', '7601', '7566', '6409', '6410', '6411', '7287', '6413', '6414', '6415', '6416', '6417', '6418', '6420', '7451', '7380', '6422', '6423', '6424', '6425', '6428', '7428', '7567', '6429', '6430', '6431', '6432', '7433', '7114', '6433', '6434', '6435', '6437', '6438', '6439', '6440', '6441', '6442', '6443', '7622', '6444', '6445', '7395', '6446', '7393', '7372', '6447', '6448', '6449', '6450', '6451', '7303', '6452', '6453', '6454', '6455', '6456', '6457', '7388', '6459', '7405', '6460', '6461', '6462', '7628', '6463', '7304', '6465', '6464', '6466', '6467', '6468', '6469', '7115', '6470', '6471', '6472', '6473', '7558', '7116', '6474', '6475', '7104', '7124', '7493', '7490', '7305', '6476', '6477', '7117', '6479', '7118', '7119', '6482', '6483', '6484', '6638', '7396', '7120', '6485', '8241', '7121', '6486', '6738', '6487', '6489', '6490', '6491', '6492', '7122', '7306', '6495', '6626', '6496', '7599', '6497', '7307', '6499', '6498', '6500', '6501', '6502', '7123', '6503', '6504', '6505', '6506', '6436', '6507', '6508', '6509', '6512', '6513', '6514', '6516', '6517', '6518', '6519', '6520', '7125', '6521', '6522', '7464', '7355', '6523', '6524', '6525', '8227', '6526', '6527', '6528', '6530', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6544', '6545', '7309', '6546', '6547', '7127', '6548', '6549', '6550', '6551', '6552', '6553', '6554', '6555', '6556', '6557', '6558', '7630', '6559', '7356', '6561', '6562', '6564', '6567', '7389', '7611', '6568', '7310', '6569', '6570', '6573', '6574', '6575', '6576', '7411', '7583', '6578', '6579', '7311', '6580', '6581', '6582', '7128', '6583', '6584', '6585', '6586', '6587', '6588', '6589', '7576', '6590', '6591', '7496', '7452', '6592', '6593', '6594', '6595', '6596', '6597', '6598', '6599', '7313', '6600', '7416', '8235', '6602', '7314', '7421', '6603', '6604', '6605', '7129', '6606', '7316', '6607', '7130', '7132', '7133', '7134', '7135', '6608', '7131', '6609', '6601', '6610', '6611', '6426', '7136', '6613', '6614', '6616', '6617', '6618', '6619', '6620', '8250', '6621', '6529', '7137', '7404', '6624', '7138', '6625', '7625', '7502', '6627', '6628', '6719', '6629', '6631', '6632', '6633', '6635', '6636', '6622', '6640', '6641', '6642', '6643', '6924', '7329', '7139', '6644', '6645', '6646', '6647', '6649', '6650', '6651', '6652', '6655', '6656', '6657', '7570', '6658', '6659', '6660', '7598', '6661', '7357', '6662', '6663', '7140', '6664', '6665', '7569', '8195', '6666', '6667', '6668', '7141', '6669', '6670', '6671', '6672', '7142', '6673', '6674', '6675', '6677', '6678', '7143', '6680', '6681', '6683', '6684', '6685', '6686', '7144', '6687', '7145', '6689', '6691', '6690', '6692', '7321', '6695', '6696', '7358', '6697', '6698', '7146', '7147', '6699', '6700', '6702', '6701', '8229', '6703', '6704', '6705', '6706', '7504', '6707', '6708', '6709', '6710', '6712', '6711', '6714', '6715', '7148', '7149', '6716', '6718', '6720', '7573', '6721', '6722', '7150', '6723', '7151', '8221', '6724', '6725', '6726', '6206', '6727', '6728', '6729', '7590', '6730', '6731', '7424', '6732', '6733', '6734', '6735', '6736', '7267', '6737', '6740', '6741', '6742', '6743', '6744', '6745', '7435', '6746', '6747', '7375', '6748', '6749', '7371', '6751', '7322', '6750', '6752', '6753', '7586', '6754', '6755', '6756', '7497', '7050', '6757', '6758', '7152', '6759', '7155', '7156', '6565', '8244', '7157', '7158', '7412', '8217', '6760', '6761', '6762', '6763', '6764', '6765', '7403', '6766', '6768', '7456', '6769', '6770', '6771', '7159', '8243', '7160', '7161', '6772', '6773', '6774', '6775', '6776', '7162', '6778', '6779', '7589', '6780', '7163', '6781', '6782', '6739', '6783', '6784', '6785', '6786', '6787', '6788', '6789', '7345', '7164', '6790', '6791', '7449', '7165', '6792', '6794', '6795', '7166', '6796', '6797', '6798', '6799', '6800', '7167', '6801', '6802', '6803', '6804', '6805', '6806', '6807', '6808', '6809', '6810', '7605', '6811', '6812', '6813', '6814', '6815', '6816', '7168', '6817', '6818', '6819', '6820', '6821', '7397', '6822', '6823', '8228', '6824', '6825', '6826', '7169', '6827', '7370', '6828', '6829', '6830', '6831', '6832', '6833', '6834', '6835', '6855', '7170', '6836', '6838', '6839', '6840', '6841', '6842', '7400', '6843', '6844', '6846', '6848', '6849', '6850', '6851', '6852', '7171', '6853', '6854', '6171', '6856', '6857', '6858', '7172', '6859', '7173', '6860', '6861', '6862', '6863', '6864', '6865', '6866', '6867', '6868', '6869', '7366', '7174', '6922', '6870', '6871', '7491', '6941', '6963', '6872', '6874', '6875', '6876', '7381', '6877', '6878', '6879', '6615', '7175', '6881', '6882', '6883', '6884', '6885', '6886', '6427', '6887', '6888', '6889', '6890', '6891', '6892', '6893', '6894', '6895', '6896', '6897', '6693', '6898', '6899', '6900', '6901', '7079', '7507', '6902', '6903', '6904', '6905', '6906', '6907', '6908', '6909', '6910', '6911', '6912', '6913', '7487', '6914', '7561', '6915', '6916', '7369', '6919', '6920', '6917', '6918', '6921', '6923', '6927', '6925', '7609', '6928', '6929', '6930', '6931', '6932', '6934', '6935', '7618', '6938', '6939', '6940', '6942', '6943', '6944', '6946', '7453', '7559', '7572', '6948', '6949', '6950', '6953', '6952', '6954', '6955', '7331', '6957', '6956', '6958', '6959', '6960', '6961', '6962', '6966', '6965', '6964', '6967', '7378', '6968', '6969', '7444', '6970', '6971', '6972', '6973', '6974', '6975', '6976', '6977', '6978', '7503', '6980', '6979', '6981', '6984', '6982', '6985', '6986', '6987', '6988', '6989', '6991', '6992', '6993', '6994', '6995', '6996', '6997', '7368', '7616', '7462', '6998', '6999', '7000', '7002', '7003', '7004', '7333', '7005', '7006', '7007', '7008', '7489', '7010', '7011', '7012', '7013', '7016', '7017', '7019', '7020', '7023', '7024', '7025', '7018', '7014', '7027', '7499', '7029', '7030', '7454', '7031', '7032', '7033', '7336', '7420', '7034', '7035', '7036', '7382', '7037', '7038', '7039', '7041', '7042', '7401', '7043', '7045', '7337', '7046', '7047', '7048', '7049', '7051', '7407', '7052', '7053', '7054', '7055', '7056', '7057', '7058', '7059', '7455', '6777', '7338', '7061', '7063', '7064', '7066', '7067', '7068', '7069', '7071', '7072', '7073', '7176', '7074', '7075', '7076', '7077', '7078', '7081', '7082', '7083', '7341', '7084', '7361', '7085', '7086', '7087', '7088', '7342', '7089', '7090', '7091', '7092', '7093', '7094', '7179', '8220', '7362', '7180', '7181', '7182', '7184', '7185', '7186', '7187', '7188', '7177', '7189', '7191', '7484', '7099', '7192', '7193', '7384', '7194', '7195', '7190', '7196', '7197', '7198', '7199', '7200', '7201', '7348', '7203', '7204', '7205', '7374', '7206', '7207', '7208', '7209', '7210', '7211', '7212', '7472', '7213', '7214', '7215', '7217', '6301', '7363', '7218', '7470', '7219', '7220', '7436', '7221', '7222', '7223', '7225', '7227', '7228', '7229', '7230', '7231', '7232', '7233', '6172', '7234', '7235', '7236', '7237', '7238', '7239', '7626', '7624', '7577', '7240', '7241', '7243', '7244', '7247', '7248', '7250', '7251', '7477', '7252', '7253', '7365', '7254', '7255', '7257', '7258', '7259', '7260', '7261', '7262', '7263', '7264', '7265', '7373', '7268', '7269', '7270', '7271', '7272', '7352', '7273', '7274', '7275', '7178', '7574', '7276', '7277', '7278', '7279', '7280', '7281']

#go through the schoolIDs array above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)

# Data stored on individual pages not accessible from one single page
# typical URL is http://www.isi.net/schools/6173
# Need to cycle through an array of those codes, created by using the =JOIN formula in Google Docs
#TO SOLVE: Some pages have 'country', creating 12 cells where the code below presumes 10
#COMPARE http://www.isi.net/schools/6198/ with http://www.isi.net/schools/7557/
#ALSO: Original table gives year of inspection - may be duplicate entries where 2 inspections?
#ALSO: Where no year of inspection, some may be Ofsted/other - see http://www.isi.net/schools/6198/

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 44)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one div, so we need to specify the class="tabular", 'class' represented by the full stop
    #there's also more than one <tr> within that div, and more than one <td>... 
    #'rows' will contain all 10 <td>s as a list, and we'll grab the ones we want in turn
    rows = root.cssselect("div.tabular tr td")
    print rows
    #create a new record to contain the data
    record = {}
#    if rows
    record['Postcode'] = rows[3].text
    record['Town'] = rows[1].text
#        record['Country'] = rows[5].text
 #       record['Ages'] = rows[7].text
  #      record['Day_board'] = rows[9].text
   #     record['Gender'] = rows[11].text
    #    record['ID'] = item
     #   print record, '------------'
      #  scraperwiki.sqlite.save(["ID"], record)
#    elif rows:
 #       #The 4th <td> tag contains the postcode for the school, so we use [3] to grab that one
  #      record['Postcode'] = rows[3].text
   #     record['Town'] = rows[1].text
    record['Ages'] = rows[5].text
    record['Day_board'] = rows[7].text
    record['Gender'] = rows[9].text
    record['ID'] = item
    print record, '------------'
    scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://www.isi.net/schools/'
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of ID codes from URLs
schoolIDs = ['6173', '7557', '6174', '6175', '7095', '6176', '6880', '6177', '6179', '6180', '6181', '7492', '7414', '6182', '6183', '7097', '7390', '7098', '6184', '6185', '6186', '6187', '6188', '6189', '6190', '7282', '6191', '6192', '6193', '6194', '6196', '6197', '6198', '6324', '6199', '7283', '6200', '6202', '6203', '6204', '7100', '6207', '6208', '6209', '6210', '6211', '6212', '6213', '8225', '7394', '7600', '7383', '6214', '6215', '6216', '6217', '7286', '6218', '6219', '6220', '6221', '6222', '6223', '8210', '6224', '6225', '6226', '7364', '6229', '6230', '7101', '6231', '6232', '6233', '6379', '6234', '6235', '6236', '6237', '6238', '7587', '6239', '6240', '6241', '7320', '7501', '6242', '6243', '6244', '7466', '6245', '7580', '6246', '6247', '6248', '6249', '7450', '6250', '6252', '6253', '6254', '7289', '6255', '6256', '7402', '6257', '7103', '6926', '6258', '6260', '6261', '6262', '6263', '7202', '7224', '7302', '6264', '6265', '6266', '6267', '6268', '6269', '7631', '6270', '6271', '6273', '6274', '7629', '6276', '7290', '6277', '6278', '6279', '6281', '6282', '6284', '6283', '7105', '7291', '6286', '7505', '7581', '7443', '7399', '7591', '7592', '8231', '7408', '7398', '7593', '7480', '7377', '6287', '6288', '6289', '7292', '6290', '6291', '6292', '8209', '6293', '6294', '7488', '7386', '6295', '6296', '7565', '7379', '6297', '8193', '6298', '7506', '6299', '6300', '6302', '7568', '6303', '6305', '7575', '6306', '7582', '6307', '6308', '6309', '7106', '6310', '6311', '6312', '6313', '6314', '6304', '8226', '7107', '6315', '6316', '6317', '6318', '6837', '6319', '6320', '6321', '6322', '6323', '7293', '7108', '6325', '6326', '7353', '6327', '6328', '6329', '7109', '6330', '6331', '6332', '7437', '6333', '6334', '6335', '6336', '6337', '8218', '6338', '6339', '6340', '6342', '6343', '7335', '6344', '6345', '6346', '7334', '7299', '6347', '6348', '6349', '6351', '7354', '6352', '6353', '6354', '6355', '6357', '6359', '7001', '6361', '7301', '6362', '6363', '6364', '6365', '7110', '6367', '6369', '6370', '6372', '6373', '6374', '6375', '6401', '6377', '7111', '6378', '7486', '7579', '6380', '6382', '6383', '6384', '6385', '6386', '6387', '7385', '7623', '6388', '6389', '7308', '6390', '6391', '6392', '6393', '6394', '6395', '6396', '7242', '6397', '7500', '6399', '6400', '6402', '7113', '7112', '6403', '6404', '6405', '6406', '6407', '6408', '7601', '7566', '6409', '6410', '6411', '7287', '6413', '6414', '6415', '6416', '6417', '6418', '6420', '7451', '7380', '6422', '6423', '6424', '6425', '6428', '7428', '7567', '6429', '6430', '6431', '6432', '7433', '7114', '6433', '6434', '6435', '6437', '6438', '6439', '6440', '6441', '6442', '6443', '7622', '6444', '6445', '7395', '6446', '7393', '7372', '6447', '6448', '6449', '6450', '6451', '7303', '6452', '6453', '6454', '6455', '6456', '6457', '7388', '6459', '7405', '6460', '6461', '6462', '7628', '6463', '7304', '6465', '6464', '6466', '6467', '6468', '6469', '7115', '6470', '6471', '6472', '6473', '7558', '7116', '6474', '6475', '7104', '7124', '7493', '7490', '7305', '6476', '6477', '7117', '6479', '7118', '7119', '6482', '6483', '6484', '6638', '7396', '7120', '6485', '8241', '7121', '6486', '6738', '6487', '6489', '6490', '6491', '6492', '7122', '7306', '6495', '6626', '6496', '7599', '6497', '7307', '6499', '6498', '6500', '6501', '6502', '7123', '6503', '6504', '6505', '6506', '6436', '6507', '6508', '6509', '6512', '6513', '6514', '6516', '6517', '6518', '6519', '6520', '7125', '6521', '6522', '7464', '7355', '6523', '6524', '6525', '8227', '6526', '6527', '6528', '6530', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6544', '6545', '7309', '6546', '6547', '7127', '6548', '6549', '6550', '6551', '6552', '6553', '6554', '6555', '6556', '6557', '6558', '7630', '6559', '7356', '6561', '6562', '6564', '6567', '7389', '7611', '6568', '7310', '6569', '6570', '6573', '6574', '6575', '6576', '7411', '7583', '6578', '6579', '7311', '6580', '6581', '6582', '7128', '6583', '6584', '6585', '6586', '6587', '6588', '6589', '7576', '6590', '6591', '7496', '7452', '6592', '6593', '6594', '6595', '6596', '6597', '6598', '6599', '7313', '6600', '7416', '8235', '6602', '7314', '7421', '6603', '6604', '6605', '7129', '6606', '7316', '6607', '7130', '7132', '7133', '7134', '7135', '6608', '7131', '6609', '6601', '6610', '6611', '6426', '7136', '6613', '6614', '6616', '6617', '6618', '6619', '6620', '8250', '6621', '6529', '7137', '7404', '6624', '7138', '6625', '7625', '7502', '6627', '6628', '6719', '6629', '6631', '6632', '6633', '6635', '6636', '6622', '6640', '6641', '6642', '6643', '6924', '7329', '7139', '6644', '6645', '6646', '6647', '6649', '6650', '6651', '6652', '6655', '6656', '6657', '7570', '6658', '6659', '6660', '7598', '6661', '7357', '6662', '6663', '7140', '6664', '6665', '7569', '8195', '6666', '6667', '6668', '7141', '6669', '6670', '6671', '6672', '7142', '6673', '6674', '6675', '6677', '6678', '7143', '6680', '6681', '6683', '6684', '6685', '6686', '7144', '6687', '7145', '6689', '6691', '6690', '6692', '7321', '6695', '6696', '7358', '6697', '6698', '7146', '7147', '6699', '6700', '6702', '6701', '8229', '6703', '6704', '6705', '6706', '7504', '6707', '6708', '6709', '6710', '6712', '6711', '6714', '6715', '7148', '7149', '6716', '6718', '6720', '7573', '6721', '6722', '7150', '6723', '7151', '8221', '6724', '6725', '6726', '6206', '6727', '6728', '6729', '7590', '6730', '6731', '7424', '6732', '6733', '6734', '6735', '6736', '7267', '6737', '6740', '6741', '6742', '6743', '6744', '6745', '7435', '6746', '6747', '7375', '6748', '6749', '7371', '6751', '7322', '6750', '6752', '6753', '7586', '6754', '6755', '6756', '7497', '7050', '6757', '6758', '7152', '6759', '7155', '7156', '6565', '8244', '7157', '7158', '7412', '8217', '6760', '6761', '6762', '6763', '6764', '6765', '7403', '6766', '6768', '7456', '6769', '6770', '6771', '7159', '8243', '7160', '7161', '6772', '6773', '6774', '6775', '6776', '7162', '6778', '6779', '7589', '6780', '7163', '6781', '6782', '6739', '6783', '6784', '6785', '6786', '6787', '6788', '6789', '7345', '7164', '6790', '6791', '7449', '7165', '6792', '6794', '6795', '7166', '6796', '6797', '6798', '6799', '6800', '7167', '6801', '6802', '6803', '6804', '6805', '6806', '6807', '6808', '6809', '6810', '7605', '6811', '6812', '6813', '6814', '6815', '6816', '7168', '6817', '6818', '6819', '6820', '6821', '7397', '6822', '6823', '8228', '6824', '6825', '6826', '7169', '6827', '7370', '6828', '6829', '6830', '6831', '6832', '6833', '6834', '6835', '6855', '7170', '6836', '6838', '6839', '6840', '6841', '6842', '7400', '6843', '6844', '6846', '6848', '6849', '6850', '6851', '6852', '7171', '6853', '6854', '6171', '6856', '6857', '6858', '7172', '6859', '7173', '6860', '6861', '6862', '6863', '6864', '6865', '6866', '6867', '6868', '6869', '7366', '7174', '6922', '6870', '6871', '7491', '6941', '6963', '6872', '6874', '6875', '6876', '7381', '6877', '6878', '6879', '6615', '7175', '6881', '6882', '6883', '6884', '6885', '6886', '6427', '6887', '6888', '6889', '6890', '6891', '6892', '6893', '6894', '6895', '6896', '6897', '6693', '6898', '6899', '6900', '6901', '7079', '7507', '6902', '6903', '6904', '6905', '6906', '6907', '6908', '6909', '6910', '6911', '6912', '6913', '7487', '6914', '7561', '6915', '6916', '7369', '6919', '6920', '6917', '6918', '6921', '6923', '6927', '6925', '7609', '6928', '6929', '6930', '6931', '6932', '6934', '6935', '7618', '6938', '6939', '6940', '6942', '6943', '6944', '6946', '7453', '7559', '7572', '6948', '6949', '6950', '6953', '6952', '6954', '6955', '7331', '6957', '6956', '6958', '6959', '6960', '6961', '6962', '6966', '6965', '6964', '6967', '7378', '6968', '6969', '7444', '6970', '6971', '6972', '6973', '6974', '6975', '6976', '6977', '6978', '7503', '6980', '6979', '6981', '6984', '6982', '6985', '6986', '6987', '6988', '6989', '6991', '6992', '6993', '6994', '6995', '6996', '6997', '7368', '7616', '7462', '6998', '6999', '7000', '7002', '7003', '7004', '7333', '7005', '7006', '7007', '7008', '7489', '7010', '7011', '7012', '7013', '7016', '7017', '7019', '7020', '7023', '7024', '7025', '7018', '7014', '7027', '7499', '7029', '7030', '7454', '7031', '7032', '7033', '7336', '7420', '7034', '7035', '7036', '7382', '7037', '7038', '7039', '7041', '7042', '7401', '7043', '7045', '7337', '7046', '7047', '7048', '7049', '7051', '7407', '7052', '7053', '7054', '7055', '7056', '7057', '7058', '7059', '7455', '6777', '7338', '7061', '7063', '7064', '7066', '7067', '7068', '7069', '7071', '7072', '7073', '7176', '7074', '7075', '7076', '7077', '7078', '7081', '7082', '7083', '7341', '7084', '7361', '7085', '7086', '7087', '7088', '7342', '7089', '7090', '7091', '7092', '7093', '7094', '7179', '8220', '7362', '7180', '7181', '7182', '7184', '7185', '7186', '7187', '7188', '7177', '7189', '7191', '7484', '7099', '7192', '7193', '7384', '7194', '7195', '7190', '7196', '7197', '7198', '7199', '7200', '7201', '7348', '7203', '7204', '7205', '7374', '7206', '7207', '7208', '7209', '7210', '7211', '7212', '7472', '7213', '7214', '7215', '7217', '6301', '7363', '7218', '7470', '7219', '7220', '7436', '7221', '7222', '7223', '7225', '7227', '7228', '7229', '7230', '7231', '7232', '7233', '6172', '7234', '7235', '7236', '7237', '7238', '7239', '7626', '7624', '7577', '7240', '7241', '7243', '7244', '7247', '7248', '7250', '7251', '7477', '7252', '7253', '7365', '7254', '7255', '7257', '7258', '7259', '7260', '7261', '7262', '7263', '7264', '7265', '7373', '7268', '7269', '7270', '7271', '7272', '7352', '7273', '7274', '7275', '7178', '7574', '7276', '7277', '7278', '7279', '7280', '7281']

#go through the schoolIDs array above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)

# Data stored on individual pages not accessible from one single page
# typical URL is http://www.isi.net/schools/6173
# Need to cycle through an array of those codes, created by using the =JOIN formula in Google Docs
#TO SOLVE: Some pages have 'country', creating 12 cells where the code below presumes 10
#COMPARE http://www.isi.net/schools/6198/ with http://www.isi.net/schools/7557/
#ALSO: Original table gives year of inspection - may be duplicate entries where 2 inspections?
#ALSO: Where no year of inspection, some may be Ofsted/other - see http://www.isi.net/schools/6198/

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 44)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one div, so we need to specify the class="tabular", 'class' represented by the full stop
    #there's also more than one <tr> within that div, and more than one <td>... 
    #'rows' will contain all 10 <td>s as a list, and we'll grab the ones we want in turn
    rows = root.cssselect("div.tabular tr td")
    print rows
    #create a new record to contain the data
    record = {}
#    if rows
    record['Postcode'] = rows[3].text
    record['Town'] = rows[1].text
#        record['Country'] = rows[5].text
 #       record['Ages'] = rows[7].text
  #      record['Day_board'] = rows[9].text
   #     record['Gender'] = rows[11].text
    #    record['ID'] = item
     #   print record, '------------'
      #  scraperwiki.sqlite.save(["ID"], record)
#    elif rows:
 #       #The 4th <td> tag contains the postcode for the school, so we use [3] to grab that one
  #      record['Postcode'] = rows[3].text
   #     record['Town'] = rows[1].text
    record['Ages'] = rows[5].text
    record['Day_board'] = rows[7].text
    record['Gender'] = rows[9].text
    record['ID'] = item
    print record, '------------'
    scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://www.isi.net/schools/'
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of ID codes from URLs
schoolIDs = ['6173', '7557', '6174', '6175', '7095', '6176', '6880', '6177', '6179', '6180', '6181', '7492', '7414', '6182', '6183', '7097', '7390', '7098', '6184', '6185', '6186', '6187', '6188', '6189', '6190', '7282', '6191', '6192', '6193', '6194', '6196', '6197', '6198', '6324', '6199', '7283', '6200', '6202', '6203', '6204', '7100', '6207', '6208', '6209', '6210', '6211', '6212', '6213', '8225', '7394', '7600', '7383', '6214', '6215', '6216', '6217', '7286', '6218', '6219', '6220', '6221', '6222', '6223', '8210', '6224', '6225', '6226', '7364', '6229', '6230', '7101', '6231', '6232', '6233', '6379', '6234', '6235', '6236', '6237', '6238', '7587', '6239', '6240', '6241', '7320', '7501', '6242', '6243', '6244', '7466', '6245', '7580', '6246', '6247', '6248', '6249', '7450', '6250', '6252', '6253', '6254', '7289', '6255', '6256', '7402', '6257', '7103', '6926', '6258', '6260', '6261', '6262', '6263', '7202', '7224', '7302', '6264', '6265', '6266', '6267', '6268', '6269', '7631', '6270', '6271', '6273', '6274', '7629', '6276', '7290', '6277', '6278', '6279', '6281', '6282', '6284', '6283', '7105', '7291', '6286', '7505', '7581', '7443', '7399', '7591', '7592', '8231', '7408', '7398', '7593', '7480', '7377', '6287', '6288', '6289', '7292', '6290', '6291', '6292', '8209', '6293', '6294', '7488', '7386', '6295', '6296', '7565', '7379', '6297', '8193', '6298', '7506', '6299', '6300', '6302', '7568', '6303', '6305', '7575', '6306', '7582', '6307', '6308', '6309', '7106', '6310', '6311', '6312', '6313', '6314', '6304', '8226', '7107', '6315', '6316', '6317', '6318', '6837', '6319', '6320', '6321', '6322', '6323', '7293', '7108', '6325', '6326', '7353', '6327', '6328', '6329', '7109', '6330', '6331', '6332', '7437', '6333', '6334', '6335', '6336', '6337', '8218', '6338', '6339', '6340', '6342', '6343', '7335', '6344', '6345', '6346', '7334', '7299', '6347', '6348', '6349', '6351', '7354', '6352', '6353', '6354', '6355', '6357', '6359', '7001', '6361', '7301', '6362', '6363', '6364', '6365', '7110', '6367', '6369', '6370', '6372', '6373', '6374', '6375', '6401', '6377', '7111', '6378', '7486', '7579', '6380', '6382', '6383', '6384', '6385', '6386', '6387', '7385', '7623', '6388', '6389', '7308', '6390', '6391', '6392', '6393', '6394', '6395', '6396', '7242', '6397', '7500', '6399', '6400', '6402', '7113', '7112', '6403', '6404', '6405', '6406', '6407', '6408', '7601', '7566', '6409', '6410', '6411', '7287', '6413', '6414', '6415', '6416', '6417', '6418', '6420', '7451', '7380', '6422', '6423', '6424', '6425', '6428', '7428', '7567', '6429', '6430', '6431', '6432', '7433', '7114', '6433', '6434', '6435', '6437', '6438', '6439', '6440', '6441', '6442', '6443', '7622', '6444', '6445', '7395', '6446', '7393', '7372', '6447', '6448', '6449', '6450', '6451', '7303', '6452', '6453', '6454', '6455', '6456', '6457', '7388', '6459', '7405', '6460', '6461', '6462', '7628', '6463', '7304', '6465', '6464', '6466', '6467', '6468', '6469', '7115', '6470', '6471', '6472', '6473', '7558', '7116', '6474', '6475', '7104', '7124', '7493', '7490', '7305', '6476', '6477', '7117', '6479', '7118', '7119', '6482', '6483', '6484', '6638', '7396', '7120', '6485', '8241', '7121', '6486', '6738', '6487', '6489', '6490', '6491', '6492', '7122', '7306', '6495', '6626', '6496', '7599', '6497', '7307', '6499', '6498', '6500', '6501', '6502', '7123', '6503', '6504', '6505', '6506', '6436', '6507', '6508', '6509', '6512', '6513', '6514', '6516', '6517', '6518', '6519', '6520', '7125', '6521', '6522', '7464', '7355', '6523', '6524', '6525', '8227', '6526', '6527', '6528', '6530', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6544', '6545', '7309', '6546', '6547', '7127', '6548', '6549', '6550', '6551', '6552', '6553', '6554', '6555', '6556', '6557', '6558', '7630', '6559', '7356', '6561', '6562', '6564', '6567', '7389', '7611', '6568', '7310', '6569', '6570', '6573', '6574', '6575', '6576', '7411', '7583', '6578', '6579', '7311', '6580', '6581', '6582', '7128', '6583', '6584', '6585', '6586', '6587', '6588', '6589', '7576', '6590', '6591', '7496', '7452', '6592', '6593', '6594', '6595', '6596', '6597', '6598', '6599', '7313', '6600', '7416', '8235', '6602', '7314', '7421', '6603', '6604', '6605', '7129', '6606', '7316', '6607', '7130', '7132', '7133', '7134', '7135', '6608', '7131', '6609', '6601', '6610', '6611', '6426', '7136', '6613', '6614', '6616', '6617', '6618', '6619', '6620', '8250', '6621', '6529', '7137', '7404', '6624', '7138', '6625', '7625', '7502', '6627', '6628', '6719', '6629', '6631', '6632', '6633', '6635', '6636', '6622', '6640', '6641', '6642', '6643', '6924', '7329', '7139', '6644', '6645', '6646', '6647', '6649', '6650', '6651', '6652', '6655', '6656', '6657', '7570', '6658', '6659', '6660', '7598', '6661', '7357', '6662', '6663', '7140', '6664', '6665', '7569', '8195', '6666', '6667', '6668', '7141', '6669', '6670', '6671', '6672', '7142', '6673', '6674', '6675', '6677', '6678', '7143', '6680', '6681', '6683', '6684', '6685', '6686', '7144', '6687', '7145', '6689', '6691', '6690', '6692', '7321', '6695', '6696', '7358', '6697', '6698', '7146', '7147', '6699', '6700', '6702', '6701', '8229', '6703', '6704', '6705', '6706', '7504', '6707', '6708', '6709', '6710', '6712', '6711', '6714', '6715', '7148', '7149', '6716', '6718', '6720', '7573', '6721', '6722', '7150', '6723', '7151', '8221', '6724', '6725', '6726', '6206', '6727', '6728', '6729', '7590', '6730', '6731', '7424', '6732', '6733', '6734', '6735', '6736', '7267', '6737', '6740', '6741', '6742', '6743', '6744', '6745', '7435', '6746', '6747', '7375', '6748', '6749', '7371', '6751', '7322', '6750', '6752', '6753', '7586', '6754', '6755', '6756', '7497', '7050', '6757', '6758', '7152', '6759', '7155', '7156', '6565', '8244', '7157', '7158', '7412', '8217', '6760', '6761', '6762', '6763', '6764', '6765', '7403', '6766', '6768', '7456', '6769', '6770', '6771', '7159', '8243', '7160', '7161', '6772', '6773', '6774', '6775', '6776', '7162', '6778', '6779', '7589', '6780', '7163', '6781', '6782', '6739', '6783', '6784', '6785', '6786', '6787', '6788', '6789', '7345', '7164', '6790', '6791', '7449', '7165', '6792', '6794', '6795', '7166', '6796', '6797', '6798', '6799', '6800', '7167', '6801', '6802', '6803', '6804', '6805', '6806', '6807', '6808', '6809', '6810', '7605', '6811', '6812', '6813', '6814', '6815', '6816', '7168', '6817', '6818', '6819', '6820', '6821', '7397', '6822', '6823', '8228', '6824', '6825', '6826', '7169', '6827', '7370', '6828', '6829', '6830', '6831', '6832', '6833', '6834', '6835', '6855', '7170', '6836', '6838', '6839', '6840', '6841', '6842', '7400', '6843', '6844', '6846', '6848', '6849', '6850', '6851', '6852', '7171', '6853', '6854', '6171', '6856', '6857', '6858', '7172', '6859', '7173', '6860', '6861', '6862', '6863', '6864', '6865', '6866', '6867', '6868', '6869', '7366', '7174', '6922', '6870', '6871', '7491', '6941', '6963', '6872', '6874', '6875', '6876', '7381', '6877', '6878', '6879', '6615', '7175', '6881', '6882', '6883', '6884', '6885', '6886', '6427', '6887', '6888', '6889', '6890', '6891', '6892', '6893', '6894', '6895', '6896', '6897', '6693', '6898', '6899', '6900', '6901', '7079', '7507', '6902', '6903', '6904', '6905', '6906', '6907', '6908', '6909', '6910', '6911', '6912', '6913', '7487', '6914', '7561', '6915', '6916', '7369', '6919', '6920', '6917', '6918', '6921', '6923', '6927', '6925', '7609', '6928', '6929', '6930', '6931', '6932', '6934', '6935', '7618', '6938', '6939', '6940', '6942', '6943', '6944', '6946', '7453', '7559', '7572', '6948', '6949', '6950', '6953', '6952', '6954', '6955', '7331', '6957', '6956', '6958', '6959', '6960', '6961', '6962', '6966', '6965', '6964', '6967', '7378', '6968', '6969', '7444', '6970', '6971', '6972', '6973', '6974', '6975', '6976', '6977', '6978', '7503', '6980', '6979', '6981', '6984', '6982', '6985', '6986', '6987', '6988', '6989', '6991', '6992', '6993', '6994', '6995', '6996', '6997', '7368', '7616', '7462', '6998', '6999', '7000', '7002', '7003', '7004', '7333', '7005', '7006', '7007', '7008', '7489', '7010', '7011', '7012', '7013', '7016', '7017', '7019', '7020', '7023', '7024', '7025', '7018', '7014', '7027', '7499', '7029', '7030', '7454', '7031', '7032', '7033', '7336', '7420', '7034', '7035', '7036', '7382', '7037', '7038', '7039', '7041', '7042', '7401', '7043', '7045', '7337', '7046', '7047', '7048', '7049', '7051', '7407', '7052', '7053', '7054', '7055', '7056', '7057', '7058', '7059', '7455', '6777', '7338', '7061', '7063', '7064', '7066', '7067', '7068', '7069', '7071', '7072', '7073', '7176', '7074', '7075', '7076', '7077', '7078', '7081', '7082', '7083', '7341', '7084', '7361', '7085', '7086', '7087', '7088', '7342', '7089', '7090', '7091', '7092', '7093', '7094', '7179', '8220', '7362', '7180', '7181', '7182', '7184', '7185', '7186', '7187', '7188', '7177', '7189', '7191', '7484', '7099', '7192', '7193', '7384', '7194', '7195', '7190', '7196', '7197', '7198', '7199', '7200', '7201', '7348', '7203', '7204', '7205', '7374', '7206', '7207', '7208', '7209', '7210', '7211', '7212', '7472', '7213', '7214', '7215', '7217', '6301', '7363', '7218', '7470', '7219', '7220', '7436', '7221', '7222', '7223', '7225', '7227', '7228', '7229', '7230', '7231', '7232', '7233', '6172', '7234', '7235', '7236', '7237', '7238', '7239', '7626', '7624', '7577', '7240', '7241', '7243', '7244', '7247', '7248', '7250', '7251', '7477', '7252', '7253', '7365', '7254', '7255', '7257', '7258', '7259', '7260', '7261', '7262', '7263', '7264', '7265', '7373', '7268', '7269', '7270', '7271', '7272', '7352', '7273', '7274', '7275', '7178', '7574', '7276', '7277', '7278', '7279', '7280', '7281']

#go through the schoolIDs array above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)

# Data stored on individual pages not accessible from one single page
# typical URL is http://www.isi.net/schools/6173
# Need to cycle through an array of those codes, created by using the =JOIN formula in Google Docs
#TO SOLVE: Some pages have 'country', creating 12 cells where the code below presumes 10
#COMPARE http://www.isi.net/schools/6198/ with http://www.isi.net/schools/7557/
#ALSO: Original table gives year of inspection - may be duplicate entries where 2 inspections?
#ALSO: Where no year of inspection, some may be Ofsted/other - see http://www.isi.net/schools/6198/

#If you want to understand this scraper - start at the bottom where it says 'base_url' (line 44)

import scraperwiki
#import urlparse
import lxml.html

#Create a function called 'scrape_table' which is called in the function 'scrape_page' below
#The 'scrape_page' function also passed the contents of the page to this function as 'root'
def scrape_table(root):
    #Use cssselect to find the contents of a particular HTML tag, and put it in a new object 'rows'
    #there's more than one div, so we need to specify the class="tabular", 'class' represented by the full stop
    #there's also more than one <tr> within that div, and more than one <td>... 
    #'rows' will contain all 10 <td>s as a list, and we'll grab the ones we want in turn
    rows = root.cssselect("div.tabular tr td")
    print rows
    #create a new record to contain the data
    record = {}
#    if rows
    record['Postcode'] = rows[3].text
    record['Town'] = rows[1].text
#        record['Country'] = rows[5].text
 #       record['Ages'] = rows[7].text
  #      record['Day_board'] = rows[9].text
   #     record['Gender'] = rows[11].text
    #    record['ID'] = item
     #   print record, '------------'
      #  scraperwiki.sqlite.save(["ID"], record)
#    elif rows:
 #       #The 4th <td> tag contains the postcode for the school, so we use [3] to grab that one
  #      record['Postcode'] = rows[3].text
   #     record['Town'] = rows[1].text
    record['Ages'] = rows[5].text
    record['Day_board'] = rows[7].text
    record['Gender'] = rows[9].text
    record['ID'] = item
    print record, '------------'
    scraperwiki.sqlite.save(["ID"], record)


#this creates a new function and (re)names whatever parameter is passed to it - i.e. 'next_link' below - as 'url'
def scrape_page(url):
    #now 'url' is scraped with the scraperwiki library imported above, and the contents put into a new object, 'html'
    html = scraperwiki.scrape(url)
    print html
    #now we use the lxml.html function imported above to convert 'html' into a new object, 'root'
    root = lxml.html.fromstring(html)
    #now we call another function on root, which we write - above
    scrape_table(root)

#START HERE: This is the part of the URL which all our pages share
base_url = 'http://www.isi.net/schools/'
#And these are the numbers which we need to complete that URL to make each individual URL
#This list has been compiled using the =JOIN formula in Google Docs on a column of ID codes from URLs
schoolIDs = ['6173', '7557', '6174', '6175', '7095', '6176', '6880', '6177', '6179', '6180', '6181', '7492', '7414', '6182', '6183', '7097', '7390', '7098', '6184', '6185', '6186', '6187', '6188', '6189', '6190', '7282', '6191', '6192', '6193', '6194', '6196', '6197', '6198', '6324', '6199', '7283', '6200', '6202', '6203', '6204', '7100', '6207', '6208', '6209', '6210', '6211', '6212', '6213', '8225', '7394', '7600', '7383', '6214', '6215', '6216', '6217', '7286', '6218', '6219', '6220', '6221', '6222', '6223', '8210', '6224', '6225', '6226', '7364', '6229', '6230', '7101', '6231', '6232', '6233', '6379', '6234', '6235', '6236', '6237', '6238', '7587', '6239', '6240', '6241', '7320', '7501', '6242', '6243', '6244', '7466', '6245', '7580', '6246', '6247', '6248', '6249', '7450', '6250', '6252', '6253', '6254', '7289', '6255', '6256', '7402', '6257', '7103', '6926', '6258', '6260', '6261', '6262', '6263', '7202', '7224', '7302', '6264', '6265', '6266', '6267', '6268', '6269', '7631', '6270', '6271', '6273', '6274', '7629', '6276', '7290', '6277', '6278', '6279', '6281', '6282', '6284', '6283', '7105', '7291', '6286', '7505', '7581', '7443', '7399', '7591', '7592', '8231', '7408', '7398', '7593', '7480', '7377', '6287', '6288', '6289', '7292', '6290', '6291', '6292', '8209', '6293', '6294', '7488', '7386', '6295', '6296', '7565', '7379', '6297', '8193', '6298', '7506', '6299', '6300', '6302', '7568', '6303', '6305', '7575', '6306', '7582', '6307', '6308', '6309', '7106', '6310', '6311', '6312', '6313', '6314', '6304', '8226', '7107', '6315', '6316', '6317', '6318', '6837', '6319', '6320', '6321', '6322', '6323', '7293', '7108', '6325', '6326', '7353', '6327', '6328', '6329', '7109', '6330', '6331', '6332', '7437', '6333', '6334', '6335', '6336', '6337', '8218', '6338', '6339', '6340', '6342', '6343', '7335', '6344', '6345', '6346', '7334', '7299', '6347', '6348', '6349', '6351', '7354', '6352', '6353', '6354', '6355', '6357', '6359', '7001', '6361', '7301', '6362', '6363', '6364', '6365', '7110', '6367', '6369', '6370', '6372', '6373', '6374', '6375', '6401', '6377', '7111', '6378', '7486', '7579', '6380', '6382', '6383', '6384', '6385', '6386', '6387', '7385', '7623', '6388', '6389', '7308', '6390', '6391', '6392', '6393', '6394', '6395', '6396', '7242', '6397', '7500', '6399', '6400', '6402', '7113', '7112', '6403', '6404', '6405', '6406', '6407', '6408', '7601', '7566', '6409', '6410', '6411', '7287', '6413', '6414', '6415', '6416', '6417', '6418', '6420', '7451', '7380', '6422', '6423', '6424', '6425', '6428', '7428', '7567', '6429', '6430', '6431', '6432', '7433', '7114', '6433', '6434', '6435', '6437', '6438', '6439', '6440', '6441', '6442', '6443', '7622', '6444', '6445', '7395', '6446', '7393', '7372', '6447', '6448', '6449', '6450', '6451', '7303', '6452', '6453', '6454', '6455', '6456', '6457', '7388', '6459', '7405', '6460', '6461', '6462', '7628', '6463', '7304', '6465', '6464', '6466', '6467', '6468', '6469', '7115', '6470', '6471', '6472', '6473', '7558', '7116', '6474', '6475', '7104', '7124', '7493', '7490', '7305', '6476', '6477', '7117', '6479', '7118', '7119', '6482', '6483', '6484', '6638', '7396', '7120', '6485', '8241', '7121', '6486', '6738', '6487', '6489', '6490', '6491', '6492', '7122', '7306', '6495', '6626', '6496', '7599', '6497', '7307', '6499', '6498', '6500', '6501', '6502', '7123', '6503', '6504', '6505', '6506', '6436', '6507', '6508', '6509', '6512', '6513', '6514', '6516', '6517', '6518', '6519', '6520', '7125', '6521', '6522', '7464', '7355', '6523', '6524', '6525', '8227', '6526', '6527', '6528', '6530', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6544', '6545', '7309', '6546', '6547', '7127', '6548', '6549', '6550', '6551', '6552', '6553', '6554', '6555', '6556', '6557', '6558', '7630', '6559', '7356', '6561', '6562', '6564', '6567', '7389', '7611', '6568', '7310', '6569', '6570', '6573', '6574', '6575', '6576', '7411', '7583', '6578', '6579', '7311', '6580', '6581', '6582', '7128', '6583', '6584', '6585', '6586', '6587', '6588', '6589', '7576', '6590', '6591', '7496', '7452', '6592', '6593', '6594', '6595', '6596', '6597', '6598', '6599', '7313', '6600', '7416', '8235', '6602', '7314', '7421', '6603', '6604', '6605', '7129', '6606', '7316', '6607', '7130', '7132', '7133', '7134', '7135', '6608', '7131', '6609', '6601', '6610', '6611', '6426', '7136', '6613', '6614', '6616', '6617', '6618', '6619', '6620', '8250', '6621', '6529', '7137', '7404', '6624', '7138', '6625', '7625', '7502', '6627', '6628', '6719', '6629', '6631', '6632', '6633', '6635', '6636', '6622', '6640', '6641', '6642', '6643', '6924', '7329', '7139', '6644', '6645', '6646', '6647', '6649', '6650', '6651', '6652', '6655', '6656', '6657', '7570', '6658', '6659', '6660', '7598', '6661', '7357', '6662', '6663', '7140', '6664', '6665', '7569', '8195', '6666', '6667', '6668', '7141', '6669', '6670', '6671', '6672', '7142', '6673', '6674', '6675', '6677', '6678', '7143', '6680', '6681', '6683', '6684', '6685', '6686', '7144', '6687', '7145', '6689', '6691', '6690', '6692', '7321', '6695', '6696', '7358', '6697', '6698', '7146', '7147', '6699', '6700', '6702', '6701', '8229', '6703', '6704', '6705', '6706', '7504', '6707', '6708', '6709', '6710', '6712', '6711', '6714', '6715', '7148', '7149', '6716', '6718', '6720', '7573', '6721', '6722', '7150', '6723', '7151', '8221', '6724', '6725', '6726', '6206', '6727', '6728', '6729', '7590', '6730', '6731', '7424', '6732', '6733', '6734', '6735', '6736', '7267', '6737', '6740', '6741', '6742', '6743', '6744', '6745', '7435', '6746', '6747', '7375', '6748', '6749', '7371', '6751', '7322', '6750', '6752', '6753', '7586', '6754', '6755', '6756', '7497', '7050', '6757', '6758', '7152', '6759', '7155', '7156', '6565', '8244', '7157', '7158', '7412', '8217', '6760', '6761', '6762', '6763', '6764', '6765', '7403', '6766', '6768', '7456', '6769', '6770', '6771', '7159', '8243', '7160', '7161', '6772', '6773', '6774', '6775', '6776', '7162', '6778', '6779', '7589', '6780', '7163', '6781', '6782', '6739', '6783', '6784', '6785', '6786', '6787', '6788', '6789', '7345', '7164', '6790', '6791', '7449', '7165', '6792', '6794', '6795', '7166', '6796', '6797', '6798', '6799', '6800', '7167', '6801', '6802', '6803', '6804', '6805', '6806', '6807', '6808', '6809', '6810', '7605', '6811', '6812', '6813', '6814', '6815', '6816', '7168', '6817', '6818', '6819', '6820', '6821', '7397', '6822', '6823', '8228', '6824', '6825', '6826', '7169', '6827', '7370', '6828', '6829', '6830', '6831', '6832', '6833', '6834', '6835', '6855', '7170', '6836', '6838', '6839', '6840', '6841', '6842', '7400', '6843', '6844', '6846', '6848', '6849', '6850', '6851', '6852', '7171', '6853', '6854', '6171', '6856', '6857', '6858', '7172', '6859', '7173', '6860', '6861', '6862', '6863', '6864', '6865', '6866', '6867', '6868', '6869', '7366', '7174', '6922', '6870', '6871', '7491', '6941', '6963', '6872', '6874', '6875', '6876', '7381', '6877', '6878', '6879', '6615', '7175', '6881', '6882', '6883', '6884', '6885', '6886', '6427', '6887', '6888', '6889', '6890', '6891', '6892', '6893', '6894', '6895', '6896', '6897', '6693', '6898', '6899', '6900', '6901', '7079', '7507', '6902', '6903', '6904', '6905', '6906', '6907', '6908', '6909', '6910', '6911', '6912', '6913', '7487', '6914', '7561', '6915', '6916', '7369', '6919', '6920', '6917', '6918', '6921', '6923', '6927', '6925', '7609', '6928', '6929', '6930', '6931', '6932', '6934', '6935', '7618', '6938', '6939', '6940', '6942', '6943', '6944', '6946', '7453', '7559', '7572', '6948', '6949', '6950', '6953', '6952', '6954', '6955', '7331', '6957', '6956', '6958', '6959', '6960', '6961', '6962', '6966', '6965', '6964', '6967', '7378', '6968', '6969', '7444', '6970', '6971', '6972', '6973', '6974', '6975', '6976', '6977', '6978', '7503', '6980', '6979', '6981', '6984', '6982', '6985', '6986', '6987', '6988', '6989', '6991', '6992', '6993', '6994', '6995', '6996', '6997', '7368', '7616', '7462', '6998', '6999', '7000', '7002', '7003', '7004', '7333', '7005', '7006', '7007', '7008', '7489', '7010', '7011', '7012', '7013', '7016', '7017', '7019', '7020', '7023', '7024', '7025', '7018', '7014', '7027', '7499', '7029', '7030', '7454', '7031', '7032', '7033', '7336', '7420', '7034', '7035', '7036', '7382', '7037', '7038', '7039', '7041', '7042', '7401', '7043', '7045', '7337', '7046', '7047', '7048', '7049', '7051', '7407', '7052', '7053', '7054', '7055', '7056', '7057', '7058', '7059', '7455', '6777', '7338', '7061', '7063', '7064', '7066', '7067', '7068', '7069', '7071', '7072', '7073', '7176', '7074', '7075', '7076', '7077', '7078', '7081', '7082', '7083', '7341', '7084', '7361', '7085', '7086', '7087', '7088', '7342', '7089', '7090', '7091', '7092', '7093', '7094', '7179', '8220', '7362', '7180', '7181', '7182', '7184', '7185', '7186', '7187', '7188', '7177', '7189', '7191', '7484', '7099', '7192', '7193', '7384', '7194', '7195', '7190', '7196', '7197', '7198', '7199', '7200', '7201', '7348', '7203', '7204', '7205', '7374', '7206', '7207', '7208', '7209', '7210', '7211', '7212', '7472', '7213', '7214', '7215', '7217', '6301', '7363', '7218', '7470', '7219', '7220', '7436', '7221', '7222', '7223', '7225', '7227', '7228', '7229', '7230', '7231', '7232', '7233', '6172', '7234', '7235', '7236', '7237', '7238', '7239', '7626', '7624', '7577', '7240', '7241', '7243', '7244', '7247', '7248', '7250', '7251', '7477', '7252', '7253', '7365', '7254', '7255', '7257', '7258', '7259', '7260', '7261', '7262', '7263', '7264', '7265', '7373', '7268', '7269', '7270', '7271', '7272', '7352', '7273', '7274', '7275', '7178', '7574', '7276', '7277', '7278', '7279', '7280', '7281']

#go through the schoolIDs array above, and for each ID...
for item in schoolIDs:
    #show it in the console
    print item
    #create a URL called 'next_link' which adds that ID to the end of the base_url variable
    next_link = base_url+item
    #pass that new concatenated URL to a function, 'scrape_page', which is scripted above
    scrape_page(next_link)

